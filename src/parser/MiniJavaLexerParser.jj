/**
 * A JavaCC lexer/parser which recognises proper MiniJava
 * grammar and creates objects for an AST.
 */

options {
    JAVA_UNICODE_ESCAPE = true;
    COMMON_TOKEN_ACTION = false; // Call a special method after each token
}

PARSER_BEGIN(MiniJavaParser)
package parser;

import syntaxtree.*;
import visitor.*;

public class MiniJavaParser {
    public MiniJavaParser() {}
}
PARSER_END(MiniJavaParser)

/* TOKENS */
// Skip whitespace
SKIP :
{ " " | "\t" | "\n" | "\r" | "\f" }

// Comments
// TODO Handle EOF in '//' comment
// See test execute/2014G21/PriorityQueue.java
SPECIAL_TOKEN:
{
    < SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
    | < MULTI_LINE_COMMENT: "/*" > : WithinComment
}

<WithinComment> SKIP :
{
    "*/" : DEFAULT
}
<WithinComment> MORE :
{
    <~[]>
}

// Reserved words
TOKEN :
{
    < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < VOID: "void" >
    | < STRING: "String" >
    | < RETURN: "return" >
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" >
    | < PRINT: "System.out.println" >
    | < LENGTH: "length" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < THIS: "this" >
    | < NEW: "new" >
}

// Operators
TOKEN :
{
    < AND: "&&" >
    | < LT: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < STAR: "*" >
    | < BANG: "!" >
    | < ASSIGN: "=" >
    | < GT: ">" > // Extensions follows
    | < LEQ: "<=" >
    | < GEQ: ">=" >
    | < EQ: "==" >
    | < NEQ: "!=" >
    | < OR: "||" > // Separate extension
}

// Separators
TOKEN :
{
    < LBRACE: "{" >
    | < RBRACE: "}" >
    | < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < SEMICOLON: ";" >
    | < COMMA: "," >
    | < DOT: "." >
}

// Lexicals
TOKEN :
{
    < IDENTIFIER: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
    | < INTEGER_LITERAL: "0"
        | ["1"-"9"] (["0"-"9"])* >
}

// Will be called after every token
TOKEN_MGR_DECLS :
{
    int tokenCount = 0;
    void CommonTokenAction(Token t)
    {
        tokenCount++;
    }
}

// To be able to print the number of tokens
<*>
TOKEN :
{
    <EOF>
    //{ System.out.println("Token count: " + tokenCount); }
}

/* GRAMMAR */
Program Program() :
{ MainClass mc = null; ClassDeclList cdl = new ClassDeclList(); ClassDecl cd = null; }
{
    // Catch lexer errors here since they occur before the parser which
    // contains the ErrorHandler
    try {
        mc = MainClass() ( cd = ClassDecl() { cdl.addElement(cd); } )*
            <EOF>
    } catch (TokenMgrError e) {
        System.err.println(e);
        System.exit(1); // According to Tigris spec
    }
    { return new Program(mc, cdl); }
}

MainClass MainClass() :
{
    Identifier i1, i2, i3; StatementList sl = new StatementList(); Statement s;
    VarDeclList vdl = new VarDeclList(); VarDecl vd;
}
{
    "class" i1 = Identifier() "{" "public" "static" "void" i3 = Identifier() "(" "String" "[" "]"
    i2 = Identifier() ")" "{" ( LOOKAHEAD(2) vd = VarDecl() { vdl.addElement(vd); } )*
    ( s = Stmt() { sl.addElement(s); } )* "}" "}"
    { return new MainClass(i1, i2, i3, sl, vdl); }
}

// ClassDeclExtends is an extension to the grammar
ClassDecl ClassDecl() :
{
    Identifier i; VarDecl vd; VarDeclList vdl = new VarDeclList(); MethodDecl md;
    MethodDeclList mdl = new MethodDeclList();
}
{
    "class" i = Identifier() "{" ( vd = VarDecl() { vdl.addElement(vd); } )*
    ( md = MethodDecl() { mdl.addElement(md); } )* "}"
    { return new ClassDeclSimple(i, vdl, mdl); }
}

VarDecl VarDecl() :
{ Type t; Identifier i; }
{
    t = Type() i = Identifier() ";"
    { return new VarDecl(t, i); }
}

MethodDecl MethodDecl() :
{
    Type t; Identifier i; FormalList fl = new FormalList(); VarDecl vd; VarDeclList vdl  = new VarDeclList();
    Statement s; StatementList sl = new StatementList(); Exp e;
}
{
    "public" t = Type() i = Identifier() "(" fl = FormalList() ")" "{"
    ( LOOKAHEAD(2) vd = VarDecl() { vdl.addElement(vd); } )*
    ( s = Stmt() { sl.addElement(s); } )* "return" e = Exp() ";" "}"
    { return new MethodDecl(t, i, fl, vdl, sl, e); }
}

FormalList FormalList() :
{ Formal f; FormalList fl = new FormalList(); Type t; Identifier i; }
{
    (
    t = Type() i = Identifier() { fl.addElement(new Formal(t, i)); }
    ( f = FormalRest() { fl.addElement(f); } )*
    | {}
    )
    { return fl; }
}

Formal FormalRest() :
{ Type t; Identifier i; }
{
    "," t = Type() i = Identifier()
    { return new Formal(t, i); }
}

Type Type() :
{ Type t; Token tok; }
{
    (
    LOOKAHEAD(2) "int" "[" "]" { t = new IntArrayType(); }
    | "boolean" { t = new BooleanType(); }
    | "int" { t = new IntegerType(); }
    | tok = <IDENTIFIER> { t  = new IdentifierType(tok.toString()); }
    )
    { return t; }
}

Statement Stmt() :
{
    StatementList sl = new StatementList(); Statement s, s1, s2;
    Exp e1, e2; Identifier i; VarDeclList vdl = new VarDeclList();
    VarDecl vd;
}
{
    (
    "{" (LOOKAHEAD(2) vd = VarDecl() { vdl.addElement(vd); } )*
        ( s1 = Stmt() { sl.addElement(s1); } )* "}" { s = new Block(sl, vdl); }
    | "if" "(" e1 = Exp() ")" s1 = Stmt() "else" s2 = Stmt() { s = new If(e1, s1, s2); }
    | "while" "(" e1 = Exp() ")" s1 = Stmt() { s = new While(e1, s1); }
    | "System.out.println" "(" e1 = Exp() ")" ";" { s = new Print(e1); }
    | LOOKAHEAD(2) i = Identifier() "=" e1 = Exp() ";" { s = new Assign(i, e1); }
    | i = Identifier() "[" e1 = Exp() "]" "=" e2 = Exp() ";" { s = new ArrayAssign(i, e1, e2); }
    )
    { return s; }
}

// Fixes op precedence but not associativity, should be handled in AST
Exp Exp() :
{ Exp e; }
{
    e = Or()
    { return e; }
}

// Binds the loosest
Exp Or() :
{ Exp e1, e2; }
{
    e1 = And() ( "||" e2 = And() { e1 = new Or(e1, e2); } )*
    { return e1; }
}

Exp And() :
{ Exp e1, e2; }
{
    e1 = Equality() ( "&&" e2 = Equality() { e1 = new And(e1, e2); } )*
    { return e1; }
}

Exp Equality() :
{ Exp e1, e2; String op; }
{
    // TODO This was changed from [] to ()*
    e1 = Relational() ( op = EqualityOpHelper() e2 = Relational() { e1 = CompareOp(op, e1, e2); } )*
    { return e1; }
}

String EqualityOpHelper() :
{ String op; }
{
    (
    "==" { op = "=="; }
    | "!=" { op = "!="; }
    )
    { return op; }
}

Exp Relational() :
{ Exp e1, e2; String op; }
{
    e1 = Additive() [ op = RelationalOpHelper() e2 = Additive() { e1 = CompareOp(op, e1, e2); } ]
    { return e1; }
}

String RelationalOpHelper() :
{ String op; }
{
    (
    "<" { op = "<"; }
    | ">" { op = ">"; }
    | "<=" { op = "<="; }
    | ">=" { op = ">="; }
    )
    { return op; }
}

// Helper method to get the right operator object
Exp CompareOp(String op, Exp e1, Exp e2) :
{ Exp e; }
{
    {
        switch(op) {
            case "==": e = new Equals(e1, e2);
                break;
            case "!=": e = new EqualsNot(e1, e2);
                break;
            case "<": e = new LessThan(e1, e2);
                break;
            case ">": e = new GreaterThan(e1, e2);
                break;
            case "<=": e = new LessThanEquals(e1, e2);
                break;
            case ">=": e = new GreaterThanEquals(e1, e2);
                break;
            default: e = null;
                break;
        }
    }
    { return e; }
}

Exp Additive() :
{ Exp e1, e2; String op; }
{
    e1 = Times() ( op = AdditiveOpHelper() e2 = Times() { e1 = AdditiveOp(op, e1, e2); } )*
    { return e1; }
}

String AdditiveOpHelper() :
{ String op; }
{
    (
    "+" { op = "+"; }
    | "-" { op = "-"; }
    )
    { return op; }
}

Exp AdditiveOp(String op, Exp e1, Exp e2) :
{ Exp e; }
{
    {
        switch(op) {
            case "+": e = new Plus(e1, e2);
                break;
            case "-": e = new Minus(e1, e2);
                break;
            default: e = null;
                break;
        }
    }
    { return e; }
}

Exp Times() :
{ Exp e1, e2; }
{
    e1 = PrefixExp() ( "*" e2 = PrefixExp() { e1 = new Times(e1, e2); } )*
    { return e1; }
}

Exp PrefixExp() :
{ Exp e; }
{
    (
    e = Not()
    | e = PostfixExp()
    )
    { return e; }
}

Exp Not() :
{ Exp e; }
{
    ( "!" )+ e = PostfixExp() { e = new Not(e); }
    { return e; }
}

Exp PostfixExp() :
{ Exp e, ie; Identifier i; ExpList el;}
{
    e = PrimaryExp()
    (
    "[" ie = Exp() "]" { e = new ArrayLookup(e, ie); }
    | LOOKAHEAD(2) "." i = Identifier() "(" el = ExpList() ")" { e = new Call(e, i, el); }
    | LOOKAHEAD(2) "." "length" { e = new ArrayLength(e); }
    )*
    { return e; }
}

// Binds the tightest
Exp PrimaryExp() :
{ Exp e, ie, ep; Token i; Identifier id; }
{
    (
    e = IntegerLiteral()
    | "true" { e = new True(); }
    | "false" { e = new False(); }
    | i = <IDENTIFIER> { e = new IdentifierExp(i.toString()); }
    | "this" { e = new This(); }
    | "(" e = Exp() ")"
    | LOOKAHEAD(2) "new" "int" "[" ie = Exp() "]" NewArrayRest(ie) { e = new NewArray(ie); }
    | LOOKAHEAD(2) "new" id = Identifier() "(" ")" { e = new NewObject(id); }
    )
    { return e; }
}

// To avoid multidimensional array creation
Exp NewArrayRest(Exp ie) :
{}
{
    "[" { throw new ParseException("Multidimensional array creation"); }
    | { return new NewArray(ie); }
}

ExpList ExpList() :
{ Exp e1, e2; ExpList el = new ExpList(); }
{
    (
    e1 = Exp() { el.addElement(e1); } ( e2 = ExpRest() { el.addElement(e2); } )*
    | {}
    )
    { return el; }
}

Exp ExpRest() :
{ Exp e; }
{
    "," e = Exp()
    { return e; }
}

// To be able to extract the identifier value
Identifier Identifier() :
{ Token i; }
{
    i = <IDENTIFIER>
    { return new Identifier(i.toString()); }
}

// To be able to extract the int value
IntegerLiteral IntegerLiteral() :
{ Token il; }
{
    il = <INTEGER_LITERAL>
    { return new IntegerLiteral(Integer.parseInt(il.toString())); }
}
